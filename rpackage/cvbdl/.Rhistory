library(cvbdl)
?cvbdl::predict_cvbdl
?cvbdl
?cvbdl
library(cvbdl)
?cvbdl
library(cvbdl)
?cvbdl
library(cvbdl)
library(cvbdl)
?cvbdl
library(cvbdl)
library(cvbdl)
?cvbdl
library(cvbdl)
?cvbdl
library(cvbdl)
?cvbdl
na == TRUE
NA == TRUE
is.na(NA)
library(cvbdl)
# Initial Data
X = c(66,70,69,68,67,72,73,70,57,63,70,78,67)
y = c(0,1,0,0,0,0,0,0,1,1,1,0,0)
# Fit the model
cvbdl::cvb_model(sigma = 10, rho = 0.1, X, y,
add.intercept = TRUE, MAXITER = 100, EPS = 1e-5, verboseIter = FALSE) -> m
m
# Perform Prediction
cvbdl::predict_cvbdl(m, data = c(66,70,68,59))
library(cvbdl)
# Initial Data
X = c(66,70,69,68,67,72,73,70,57,63,70,78,67)
y = c(0,1,0,0,0,0,0,0,1,1,1,0,0)
# Fit the model
cvbdl::cvb_model(sigma = 10, rho = 0.1, X, y,
add.intercept = TRUE, MAXITER = 100, EPS = 1e-5, verboseIter = FALSE) -> m
m
# Perform Prediction
cvbdl::predict_cvbdl(m, data = c(66,70,68,59))
# Perform Prediction
cvbdl::predict_cvbdl(m, X = c(66,70,68,59))
# Perform Prediction
cvbdl::predict_cvbdl(m, X = c(66,70,68,59), add.intercept = TRUE)
# Perform Prediction
cvbdl::predict_cvbdl(m, X = c(66,70,68,59), add.intercept = TRUE)
# Initial Data
X = c(66,70,69,68,67,72,73,70,57,63,70,78,67)
library(cvbdl)
m
# Fit the model
cvbdl::cvb_model(sigma = 10, rho = 0.1, X, y,
add.intercept = TRUE, MAXITER = 100, EPS = 1e-5, verboseIter = FALSE) -> m
m
# Perform Prediction
cvbdl::predict_cvbdl(m, X = c(66,70,68,59), add.intercept = TRUE)
# Perform Prediction
cvbdl::predict_cvbdl(m, X = c(66,70,68,59))
source("~/2023/SEM2/SCDL3991/rpac/cvbdl/R/cvb.R", echo=TRUE)
library(cvbdl)
# Initial Data
X = c(66,70,69,68,67,72,73,70,57,63,70,78,67)
y = c(0,1,0,0,0,0,0,0,1,1,1,0,0)
# Fit the model
cvbdl::cvb_model(sigma = 10, rho = 0.1, X, y,
add.intercept = TRUE, MAXITER = 100, EPS = 1e-5, verboseIter = FALSE) -> m
# Perform Prediction
cvbdl::predict_cvbdl(m, X = c(66,70,68,59))
# Perform Prediction
cvbdl::predict_cvbdl(m, X = c(66,70,68,59), add.intercept = TRUE)
# Perform Prediction
cvbdl::predict_cvbdl(m, X = c(66,70,68,59), add.intercept = FALSE)
X = cbind(rep(1,nrow(as.matrix(X))), X)
dim(X)
ws
dim(ws)
library(cvbdl)
# Initial Data
X = c(66,70,69,68,67,72,73,70,57,63,70,78,67)
y = c(0,1,0,0,0,0,0,0,1,1,1,0,0)
# Fit the model
cvbdl::cvb_model(sigma = 10, rho = 0.1, X, y,
add.intercept = TRUE, MAXITER = 100, EPS = 1e-5, verboseIter = FALSE) -> m
# Perform Prediction
cvbdl::predict_cvbdl(m, X = c(66,70,68,59), add.intercept = FALSE)
library(cvbdl)
# Perform Prediction
cvbdl::predict_cvbdl(m, X = c(66,70,68,59), add.intercept = FALSE)
source("~/2023/SEM2/SCDL3991/rpac/cvbdl/R/cvb.R", echo=TRUE)
library(cvbdl)
# Perform Prediction
cvbdl::predict_cvbdl(m, X = c(66,70,68,59), add.intercept = FALSE)
library(cvbdl)
# Initial Data
X = c(66,70,69,68,67,72,73,70,57,63,70,78,67)
y = c(0,1,0,0,0,0,0,0,1,1,1,0,0)
# Fit the model
cvbdl::cvb_model(sigma = 10, rho = 0.1, X, y,
add.intercept = TRUE, MAXITER = 100, EPS = 1e-5, verboseIter = FALSE) -> m
# Perform Prediction
cvbdl::predict_cvbdl(m, X = c(66,70,68,59), add.intercept = FALSE)
# Perform Prediction
cvbdl::predict_cvbdl(m, X = c(66,70,68,59), add.intercept = TRUE)
# Perform Prediction
cvbdl::predict_cvbdl(m, X = as.matrix(cbind(c(1,1,1,1),c(66,70,68,59))), add.intercept = TRUE)
library(cvbdl)
# Perform Prediction
cvbdl::predict_cvbdl(m, X = as.matrix(cbind(c(1,1,1,1),c(66,70,68,59))), add.intercept = TRUE)
# Perform Prediction
cvbdl::predict_cvbdl(m, X = as.matrix(cbind(c(1,1,1,1),c(66,70,68,59))), add.intercept = FALSE)
?cvbdl::cvbdl
library(cvbdl)
?cvbdl::cvbdl
?cvbdl
?cvbdl
library(cvbdl)
?cvbdl
library(cvbdl)
?cvbdl
library(cvbdl)
?cvbdl
library(cvbdl)
?cvbdl
library(cvbdl)
?cvbdl
library(cvbdl)
library(cvbdl)
?cvbdl
library(cvbdl)
?cvbdl
?glm
library(cvbdl)
?cvbdl
?glm
?cvbdl
library(cvbdl)
?cvbdl
library(cvbdl)
library(cvbdl)
?cvbdl
library(cvbdl)
?cvbdl
library(cvbdl)
library(cvbdl)
?cvbdl
?cvbdl::cvb_model
?glm
library(cvbdl)
?glm
?cvbdl
library(cvbdl)
library(cvbdl)
?cvbdl
library(cvbdl)
?cvbdl
library(cvbdl)
library(cvbdl)
library(cvbdl)
?cvbdl
?glm
library(cvbdl)
?glm
?cvbdl
library(cvbdl)
cvbdl::cvb_model()
?cvbdl::cvb_model()
library(cvbdl)
?cvbdl::cvb_model()
library(cvbdl)
?cvbdl::cvb_model()
library(cvbdl)
?cvbdl::cvb_model()
library(cvbdl)
library(cvbdl)
?cvbdl::cvb_model()
library(cvbdl)
?cvbdl::cvb_model()
?cvbdl::cvb_model()
library(cvbdl)
?cvbdl::cvb_model()
library(cvbdl)
library(cvbdl)
?cvbdl::cvb_model()
library(cvbdl)
library(cvbdl)
?cvbdl::cvb_model()
library(cvbdl)
?cvbdl::cvb_model()
?cvbdl::cvb_model()
library(cvbdl)
?cvbdl::cvb_model()
predict_cvb <- function(fitted_model, X, add.intercept = NA){
a.i = fitted_model$added.intercept
if(is.na(add.intercept)){
if(a.i == TRUE){
X = cbind(rep(1,nrow(as.matrix(X))), X)
}
} else if(add.intercept == TRUE) {
X = cbind(rep(1,nrow(as.matrix(X))), X)
} else if(add.intercept == FALSE) {
a.i = FALSE
} else{
cat("Error: add.intercept should be a logical or NA value \n")
stop("Please check your inputs")
}
ws = ifelse(fitted_model$ws < 0.5, 0, 1)
if(dim(as.matrix(X))[2] != length(ws)){
cat("Error: dimension mismatch.\n")
if(dim(as.matrix(X))[2] - length(ws) == 1){
stop("Did you intend add.intercept = FALSE ?")
} else if(dim(as.matrix(X))[2] - length(ws) == -1){
stop("Did you intend add.intercept = TRUE ?")
}
}
mus = fitted_model$mus
probs = expit(X %*% diag(ws) %*% mus)
classified = ifelse(probs > 0.5, 1, 0)
return(as.vector(classified))
}
library(cvbdl)
?cvbdl::predict_cvb
library(cvbdl)
?cvbdl
library(cvbdl)
?cvbdl
library(cvbdl)
?cvbdl
?cvbdl
library(cvbdl)
?cvbdl
?cvbdl::predict_cvb
?cvbdl::cross_validate
library(cvbdl)
?cvbdl::cross_validate
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# Perform cross-validation
cross_validate(folds = 5, sigma = 10, rho = 0.1,
reps = 3, seed = 0,  MAXITER = 10, EPS = 1e-5, verboseIter = TRUE)
library(cvbdl)
X = c(66,70,69,68,67,72,73,70,57,63,70,78,67)
y = c(0,1,0,0,0,0,0,0,1,1,1,0,0)
library(cvbdl)
# Perform cross-validation
cross_validate(folds = 5, sigma = 10, rho = 0.1,
reps = 3, seed = 0,  MAXITER = 10, EPS = 1e-5, verboseIter = TRUE)
X = c(66,70,69,68,67,72,73,70,57,63,70,78,67)
y = c(0,1,0,0,0,0,0,0,1,1,1,0,0)
library(cvbdl)
# Perform cross-validation
cross_validate(folds = 5, sigma = 10, rho = 0.1, X = X, y = y,
reps = 3, seed = 0,  MAXITER = 10, EPS = 1e-5, verboseIter = TRUE)
X = c(66,70,69,68,67,72,73,70,57,63,70,78,67)
y = c(0,1,0,0,0,0,0,0,1,1,1,0,0)
X = c(66,70,69,68,67,72,73,70,57,63,70,78,67)
y = c(0,1,0,0,0,0,0,0,1,1,1,0,0)
# Perform cross-validation
cvbdl::cross_validate(folds = 5, sigma = 10, rho = 0.1, X = X, y = y,
reps = 3, seed = 0,  MAXITER = 10, EPS = 1e-5, verboseIter = TRUE)
X = c(66,70,69,68,67,72,73,70,57,63,70,78,67)
y = c(0,1,0,0,0,0,0,0,1,1,1,0,0)
# Perform cross-validation
cvbdl::cross_validate(folds = 5, sigma = 10, rho = 0.1, X = X, y = y,
reps = 3, seed = 0,  MAXITER = 10, EPS = 1e-5, verboseIter = TRUE)
cvb_model(sigma, rho, X, y,
add.intercept = FALSE, MAXITER = 100,
EPS = 1e-5, verboseIter = FALSE)
cvb_model(sigma, rho, X, y,
add.intercept = FALSE, MAXITER = 100,
EPS = 1e-5, verboseIter = FALSE)
X = c(66,70,69,68,67,72,73,70,57,63,70,78,67)
y = c(0,1,0,0,0,0,0,0,1,1,1,0,0)
cvb_model(sigma, rho, X, y,
add.intercept = FALSE, MAXITER = 100,
EPS = 1e-5, verboseIter = FALSE)
cvb_model(10, 0.1, X, y,
add.intercept = FALSE, MAXITER = 100,
EPS = 1e-5, verboseIter = FALSE)
library(cvbdl)
cvb_model(10, 0.1, X, y,
add.intercept = FALSE, MAXITER = 100,
EPS = 1e-5, verboseIter = FALSE)
?cvbdl
# Initial Data
X = c(66,70,69,68,67,72,73,70,57,63,70,78,67)
y = c(0,1,0,0,0,0,0,0,1,1,1,0,0)
new.X = c(66,70,68,59)
# Fit the model
cvbdl::cvb_model(sigma = 10, rho = 0.1, X, y,
add.intercept = TRUE, MAXITER = 100, EPS = 1e-5, verboseIter = FALSE) -> m; m
cross_validate(2,10,0.1,X, y, reps = 3, seed = 0, verboseIter = TRUE)
cross_validate(2,10,0.1,X, y, reps = 3, seed = 0, verboseIter = TRUE)
X = c(66,70,69,68,67,72,73,70,57,63,70,78,67, 66,70,69,68,67,72,73,70,57,63,70,78,67,)
y = c(0,1,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0)
library(cvbdl)
y = c(0,1,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0)
X = c(66,70,69,68,67,72,73,70,57,63,70,78,67, 66,70,69,68,67,72,73,70,57,63,70,78,67,)
X = c(66,70,69,68,67,72,73,70,57,63,70,78,67, 66,70,69,68,67,72,73,70,57,63,70,78,67)
y = c(0,1,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0)
# Perform cross-validation
cross_validate(folds = 5, sigma = 10, rho = 0.1, X = X, y = y,
reps = 3, seed = 0,  MAXITER = 10, EPS = 1e-5, verboseIter = TRUE)
library(cvbdl)
?cvbdl::cross_validate
library(cvbdl)
?cvbdl::cross_validate
length(X)
length(y)
X = c(66,70,69,68,67,72,73,70,57,63,70,78,67)
y = c(0,1,0,0,0,0,0,0,1,1,1,0,0)
length(X)
length(y)
source("~/2023/SEM2/SCDL3991/rpac/cvbdl/R/cvb.R", echo=TRUE)
library(cvbdl)
source("~/2023/SEM2/SCDL3991/rpac/cvbdl/R/cvb.R", echo=TRUE)
?cvbdl::cross_validate
library(cvbdl)
?cvbdl::cross_validate
cvbdl::cross_validate(1,10,0.1,X,y,add.intercept = TRUE)
cvbdl::cross_validate(1,10,0.1,X,y,add.intercept = FALSE)
dim(X)
dim(diag(ws))
ws
X
print(X)
dim(X)
length(X)
K = 10
X
y
samp_num = nrow(X) %/% K
remainder = nrow(X) %% K
n = nrow(X)-remainder
n
X = as.matrix(X)
samp_num = nrow(X) %/% K
remainder = nrow(X) %% K
n = nrow(X)-remainder
n
rand_samp = sample(c(1:n), n, replace = FALSE)
rand_samp
test_set = X[rand_mat[i,],]
test_outcomes = y[rand_mat[i,]]
train_set = X[rand_mat[-i,],]
train_outcomes = y[rand_mat[-i,]]
rand_mat = matrix(rand_samp, nrow = K, ncol = samp_num, byrow = FALSE)
test_set = X[rand_mat[i,],]
test_outcomes = y[rand_mat[i,]]
train_set = X[rand_mat[-i,],]
train_outcomes = y[rand_mat[-i,]]
i = 1
test_set = X[rand_mat[i,],]
test_outcomes = y[rand_mat[i,]]
train_set = X[rand_mat[-i,],]
train_outcomes = y[rand_mat[-i,]]
test_set
train_set
fit = suppressMessages(cvb_model(sigma, rho, train_set, train_outcomes, MAXITER = mi, EPS = ep))
cvb_model(sigma = 10, rho = 0.1, train_set, train_outcomes)
dim(train_set)
train_set
cvb_model(sigma = 10, rho = 0.1, as.matrix(train_set), as.matrix(train_outcomes))
train_outcomes
train_set
w_jk
cvb_model(sigma = 10, rho = 0.1, as.matrix(train_set), as.matrix(train_outcomes))
library(cvbdl)
cvb_model(sigma = 10, rho = 0.1, as.matrix(train_set), as.matrix(train_outcomes))
print(ws)
cvb_model(sigma = 10, rho = 0.1, as.matrix(train_set), as.matrix(train_outcomes))
library(cvbdl)
?cvbdl
library(cvbdl)
?cvbdl
?cvbdl::predict_cvb
?cvbdl::cvb_model
library(cvbdl)
?cvbdl::cross_validate
library(cvbdl)
?cvbdl::cross_validate
library(cvbdl)
?cvbdl::cross_validate
library(cvbdl)
source("~/2023/SEM2/SCDL3991/rpac/cvbdl/R/cvb.R", echo=TRUE)
library(cvbdl)
source("~/2023/SEM2/SCDL3991/rpac/cvbdl/R/cvb.R", echo=TRUE)
?cvbdl::cross_validate
library(cvbdl)
?cvbdl::cross_validate
X = c(66,70,69,68,67,72,73,70,57,63,70,78,67, 66,70,69,68,67,72,73,70,57,63,70,78,67)
X = cbind(rep(1, length(X)) ,X)
y = c(0,1,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0)
# Perform cross-validation
cross_validate(folds = 1, sigma = 10, rho = 0.1, X = X, y = y, add.intercept = TRUE,
reps = 3, seed = 0,  MAXITER = 10, EPS = 1e-5, verboseIter = TRUE)
library(cvbdl)
library(cvbdl)
?cvbdl
library(cvbdl)
temp = c(66,70,69,68,67,72,73,70,57,63,70,78,67,53,67,75,70,81,76,79,75,76,58)
TD = c(0,1,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,0,1)
fit <- cvb_model(sigma = 10, rho = 0.1, X = temp, y = TD, add.intercept = TRUE, verboseIter = TRUE)
results <- predict_cvb(fit, X)
plot(results, temp)
cross_validate(10, sigma = 10, rho = 0.1, X = temp, y = TD, reps = 3, seed = 0, verboseIter = TRUE)
library(cvbdl)
temp = c(66,70,69,68,67,72,73,70,57,63,70,78,67,53,67,75,70,81,76,79,75,76,58)
TD = c(0,1,0,0,0,0,0,0,1,1,1,0,0,1,0,0,0,0,0,0,1,0,1)
fit <- cvb_model(sigma = 10, rho = 0.1, X = temp, y = TD, add.intercept = TRUE, verboseIter = TRUE)
results <- predict_cvb(fit, X); results
cross_validate(10, sigma = 10, rho = 0.1, X = temp, y = TD, reps = 3, seed = 0, verboseIter = TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
plot(temp, TD)
plot(temp, results , pch = 3, add = TRUE, col = "blue")
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
plot(temp, TD, ylab = "TD (dots) vs predictions (+)")
points(temp, results , pch = 3, add = TRUE, col = "blue")
a = fit$mus[1]
b = fit$mus[2]
curve( exp(a+b*temp) / (1+exp(a+b*fit$mus)), min(temp), max(temp),add=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
plot(temp, TD, ylab = "TD (dots) vs predictions (+)");par(new=TRUE)
points(temp, preds , pch = 3, col = "blue", add = TRUE)
plot(temp, TD, ylab = "TD (dots) vs predictions (+)");par(new=TRUE)
points(temp, preds , pch = 3, col = "blue");par(new=TRUE)
curve( exp(a+b*x) / (1+exp(a+b*x)), min(temp), max(temp))
plot(temp, TD, ylab = "TD (dots) vs predictions (+)");par(new=TRUE)
points(temp, preds , pch = 3, col = "blue");par(new=TRUE)
curve( exp(a+b*x) / (1+exp(a+b*x)), min(temp), max(temp))
plot(temp, TD, ylab = "TD (dots) vs predictions (+)");par(new=TRUE)
points(temp, preds , pch = 3, col = "blue");par(new=TRUE)
curve( exp(a+b*x) / (1+exp(a+b*x)), min(temp), max(temp))
plot(temp, TD, ylab = "TD (dots) vs predictions (+)")
points(temp, preds , pch = 3, col = "blue");par(new=TRUE)
curve( exp(a+b*x) / (1+exp(a+b*x)), min(temp), max(temp))
plot(temp, TD, ylab = "TD (dots) vs predictions (+)")
points(temp, preds , pch = 3, col = "blue")
curve( exp(a+b*x) / (1+exp(a+b*x)), min(temp), max(temp))
curve( exp(a+b*x) / (1+exp(a+b*x)), min(temp), max(temp) , add = TRUE)
points(temp, preds , pch = 3, col = "blue", add)
curve( exp(a+b*x) / (1+exp(a+b*x)), min(temp), max(temp) , add = TRUE)
plot(temp, TD, ylab = "TD (dots) vs predictions (+)")
curve( exp(a+b*x) / (1+exp(a+b*x)), min(temp), max(temp) , add = TRUE)
plot(temp, TD, ylab = "TD (dots) vs predictions (+)" , col = c(rep("red") , sum(preds) ), c(rep("blue"),length(preds) -sum(preds) )   )
plot(temp, TD, ylab = "TD (dots) vs predictions (+)" , col = c(rep("red" , sum(preds)), c(rep("blue"),length(preds) -sum(preds) )   )
plot(temp, TD, ylab = "TD (dots) vs predictions (+)" , col = c(rep("red" , sum(preds)), c(rep("blue",length(preds) -sum(preds) )   )
# plot and see whats happened
a = fit$mus[1]
b = fit$mus[2]
plot(temp, TD, ylab = "TD (dots) vs predictions (+)" , col = c(rep("red" , sum(preds)), rep("blue",length(preds) -sum(preds))))
curve( exp(a+b*x) / (1+exp(a+b*x)), min(temp), max(temp) , add = TRUE)
sum(preds)
preds
plot(temp, preds,  ylab = "TD (dots) vs predictions (+)")
plot(temp, preds, pch = 3, col = "blue", add = TRUE)
plot(temp, TD,  ylab = "TD (dots) vs predictions (+)")
plot(temp, preds, pch = 3, col = "blue", add = TRUE)
curve( exp(a+b*x) / (1+exp(a+b*x)), min(temp), max(temp) , add = TRUE)
plot(temp, TD,  ylab = "TD (dots) vs predictions (+)")
points(temp, preds, pch = 3, col = "blue")
curve( exp(a+b*x) / (1+exp(a+b*x)), min(temp), max(temp) , add = TRUE)
# plot and see whats happened
a = fit$mus[1]
b = fit$mus[2]
plot(temp, TD,  ylab = "TD (dots) vs predictions (+)")
points(temp, preds, pch = 3, col = "blue")
curve( exp(a+b*x) / (1+exp(a+b*x)), min(temp), max(temp) , add = TRUE)
source("~/2023/SEM2/SCDL3991/package test/rpac/rpac/testing.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/Homework/HW8/sparse.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/Homework/HW8/sparse.R", echo=TRUE)
source("~/2023/SEM2/SCDL3991/Homework/HW8/sparse.R", echo=TRUE)
# , xaxt = "n", xlab = "rho", ylab = "Number of predictors selected")  # 'xaxt = "n"' suppresses the x-axis
# Add custom x-axis
lines(labs, count)
# Create a basic plot
plot(labs, count, type = "p", pch = 3, xlab = "rho", ylab = "Number of predictors selected")
# , xaxt = "n", xlab = "rho", ylab = "Number of predictors selected")  # 'xaxt = "n"' suppresses the x-axis
# Add custom x-axis
lines(labs, count)
# Create a basic plot
plot(labs, count, type = "p", pch = 3, xlab = "rho", ylab = "Number of predictors selected", main = "Effect of rho on model size.")
lines(labs, count)
# Create a basic plot
plot(labs, count, type = "p", pch = 3, ylim = c(0,150), xlab = "rho", ylab = "Number of predictors selected", main = "Effect of rho on model size.")
lines(labs, count)
save(count, file = "rhoSize.RData")
